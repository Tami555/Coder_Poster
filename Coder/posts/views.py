from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin, PermissionRequiredMixin
from django.core.exceptions import PermissionDenied
from django.db.models import Prefetch, Q
from django.http import HttpRequest, HttpResponse, Http404, HttpResponseForbidden, HttpResponseNotFound, HttpResponseServerError
from django.shortcuts import render, get_object_or_404
from django.urls import reverse, reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from posts.models import Post, Tags, Category
from .forms import AddPostForm
from users.utils import DataFormMixin


def main_page(request: HttpRequest):
    return HttpResponse('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')


class AllPosts(ListView):
    template_name = 'posts/posts_page.html'
    extra_context = {'title': '–ü–æ–æ—Å—Ç—ã—ã—ã'}
    context_object_name = 'posts'
    paginate_by = 5

    def get_queryset(self):
        return Post.objects.all().select_related('category').prefetch_related('tags').order_by('-data_update')


class PostsBySearch(ListView):
    template_name = 'posts/posts_page.html'
    context_object_name = 'posts'
    search = ''

    def get_queryset(self):
        self.search = self.kwargs['search']
        return Post.objects.filter(Q(title__icontains=self.search) | Q(description__icontains=self.search))

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = f'–ü–æ—Å—Ç—ã | {self.search}'
        context['title_type'] = self.search
        return context


class PostsByTag(ListView):
    template_name = 'posts/posts_page.html'
    context_object_name = 'posts'
    tag_title = ''
    paginate_by = 5

    def get_queryset(self):
        tag = Tags.objects.get(slug=self.kwargs['slug_tag'])
        self.tag_title = tag.title
        return tag.posts.all().select_related('category', 'coder').prefetch_related('tags')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = f'–ü–æ—Å—Ç—ã & {self.tag_title}'
        context['title_type'] = self.tag_title
        return context


class PostsByCategory(ListView):
    template_name = 'posts/posts_page.html'
    context_object_name = 'posts'
    category_title = ''
    paginate_by = 5

    def get_queryset(self):
        cat = Category.objects.get(slug=self.kwargs['slug_category'])
        self.category_title = cat.title
        return cat.posts.all().select_related('category').prefetch_related('tags')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = f'–ü–æ—Å—Ç—ã & {self.category_title}'
        context['title_type'] = self.category_title
        return context


class OnePost(DetailView):
    template_name = 'posts/one_post_page.html'
    context_object_name = 'post'
    slug_url_kwarg = 'slug_post'

    def get_object(self, queryset=None):
        post = Post.objects.filter(
            slug=self.kwargs['slug_post']
        ).select_related('category', 'coder').prefetch_related(Prefetch('tags', queryset=Tags.objects.only('title', 'slug'))).first()

        if not post:
            raise Http404("Post not found")
        return post


class AddPost(DataFormMixin, PermissionRequiredMixin, LoginRequiredMixin, CreateView):
    form_class = AddPostForm
    template_name = 'users/forms.html'
    title_page = '–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç'
    btn_title = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
    permission_required = 'posts.add_post'
    login_url = reverse_lazy('users:login')

    def get_success_url(self):
        return reverse('all_posts')

    def form_valid(self, form):
        post = form.save(commit=False)
        post.coder = self.request.user
        return super().form_valid(form)


class EditPost(DataFormMixin, LoginRequiredMixin, PermissionRequiredMixin, UpdateView):
    # model = Post
    # fields = ['title', 'description', 'image', 'content', 'category', 'tags']
    form_class = AddPostForm
    template_name = 'users/forms.html'
    slug_url_kwarg = 'slug_post'
    title_page = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'
    btn_title = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
    login_url = 'users:login'
    permission_required = 'posts.change_post'

    def get_object(self, queryset=None):
        post = Post.objects.get(slug=self.kwargs['slug_post'])
        if post:
            if post.coder == self.request.user:
                return post
            else:
                raise PermissionDenied()
        else:
            raise Http404('–¢–∞–∫–æ–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω !')

    def get_success_url(self):
        # return reverse('users:profile', args=self.request.user.pk)
        return reverse('all_posts')


class DeletePost(DataFormMixin, PermissionRequiredMixin, LoginRequiredMixin, DeleteView):
    model = Post
    template_name = 'users/forms.html'
    slug_url_kwarg = 'slug_post'
    title_page = '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç'
    btn_title = '–£–¥–∞–ª–∏—Ç—å'
    login_url = 'users:login'
    permission_required = 'posts.delete_post'

    def get_object(self, queryset=None):
        post = Post.objects.get(slug=self.kwargs['slug_post'])
        if post:
            if post.coder == self.request.user:
                return post
            else:
                raise PermissionDenied()
        else:
            raise Http404('–¢–∞–∫–æ–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω !')

    def get_success_url(self):
        return reverse('users:profile', args=[self.request.user.pk])


def error_404(request: HttpRequest, exception):
    context = {
        'status_code': '404 Not Found',
        'error_message': '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!!',
        'error_image': 'images/er404.png',
        'error_description': '–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç... –ï—â–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ. –ê –ø–æ–∫–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é'
    }
    return HttpResponseNotFound(render(request, 'errors.html', context).content)


def error_403(request: HttpRequest, exception):
    context = {
        'status_code': 'üö´ 403 ForbiddenÔ∏è',
        'error_message': '–¢—ã –Ω–µ –ø—Ä–æ–π–¥—ë—à—å! üßô‚Äç‚ôÇÔ∏è',
        'error_image': 'images/er403.png',
        'error_description': '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Ç—É–¥–∞, –≥–¥–µ –≤–∞—Å –∂–¥—É—Ç (–Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)'
    }
    return HttpResponseForbidden(render(request, 'errors.html', context).content)


def error_413(request: HttpRequest, exception):
    context = {
        'status_code': 'üêò 413 Payload Too Large',
        'error_message': '–û–≥–æ, —Ç—ã —á—Ç–æ, —Ü–µ–ª—ã–π Docker-–æ–±—Ä–∞–∑ –∑–∞–ª–∏–ª?!Ô∏è',
        'error_image': 'images/er413.png',
        'error_description': "–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ, —á–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ PHP.\n –ü–æ–ø—Ä–æ–±—É–π —É–∂–∞—Ç—å –µ–≥–æ, –∫–∞–∫ node_modules –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ."
    }
    return HttpResponse(render(request, 'errors.html', context).content, status=413)


def error_500(request: HttpRequest):
    context = {
        'status_code': '500 Internal Server Error',
        'error_message': "–°–µ—Ä–≤–µ—Ä —É—à—ë–ª –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–¥—É–º–∏–π ü§ñüí≠",
        'error_image': 'images/er500.png',
        'error_description': "–ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è ‚Äî –∫–∞–∫ –æ–±—ã—á–Ω–æ, —ç—Ç–æ –±—ã–ª –∫—Ä–∏–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î.\n–ü–æ–ø–µ–π –∫–æ—Ñ–µ ‚òï, –º—ã —Å–∫–æ—Ä–æ –≤—Å—ë –ø–æ—á–∏–Ω–∏–º (–Ω–µ—Ç)."
    }
    return HttpResponseServerError(render(request, 'errors.html', context).content)